#!/usr/bin/perl

use strict;
use JSON;

my $sender = "nice -20 /usr/local/bin/433bus --rc-code=";
my $wolcmd = "/usr/bin/wakeonlan";
my $comp = "/opt/433ctrl/scripts/comp";
my $config_dir = "/opt/433ctrl";
my $config_file = "$config_dir/devices.json";
my $scripts_dir = "$config_dir/scripts";

my $dev = shift @ARGV;

print "loading devices... ";
my ($config, $devs_by_id, $devs_by_name) = load_config();
print "done\n";
my $device = $devs_by_id->{$dev};
$device ||= $devs_by_name->{$dev};
if (defined($device)) {
    my ($to, $skip_prepost) = @ARGV;
    if ($skip_prepost ne "--skip-prepost") {
        undef $skip_prepost;
    }
    if ($to eq "on" or $to eq "off") {
        set_state($config, $device, $to, $skip_prepost);
    } else {
        usage("wrong state");
    }
} else {
    if ($dev eq "list") {
        foreach my $id (sort keys %{$devs_by_id}) {
            printf "%2d %s\n", $id, $devs_by_id->{$id}->{name};
        }
    } elsif ($dev eq "add") {
        my $name = shift @ARGV;
        print "Press the ON button for the device to add. Waiting... ";
        my $on_code = read_code();
        print "done\n";
        sleep 3;
        print "Press the OFF button for the device to add. Waiting... ";
        my $off_code = read_code();
        print "done\n";
        my $dev_new = { name => $name,
                        id => get_next_id(),
                        on_code => $on_code,
                        off_code => $off_code,
                        state => "off",
                        state_check => [],
                        on_post_commands => [],
                        off_pre_commands => [] };
        push @{$config->{devices}}, $dev_new;
        save_config($config);
    } elsif ($dev eq "addwol") {
        my $name = shift @ARGV;
        print "Enter HW address of the device (example: b8:27:eb:d1:68:7d): ";
        my $hwaddr = <STDIN>;
        chomp $hwaddr;
        my $dev_new = { name => $name,
                        id => get_next_id(),
                        on_code => "",
                        off_code => "",
                        state => "off",
                        state_check => [],
                        on_post_commands => ["$wolcmd $hwaddr"],
                        off_pre_commands => ["$comp shutdown $name"] };
        push @{$config->{devices}}, $dev_new;
        save_config($config);
    } elsif ($dev eq "scripts") {
        print "generating static scripts... \n";
        foreach my $id (sort keys %{$devs_by_id}) {
            write_script($id, "on");
            write_script($id, "off");
        }
    } else {
        usage("unknown device");
    }
}

sub usage {
    my $msg = shift;
    if (defined($msg)) {
        print "ERROR: $msg\n";
    }
    print "$0 dev [<on|off> [--skip-prepost]] | [list] | [add name] | [addwol name] | [scripts]\n";
    exit 1;
}

sub write_script {
    my $id = shift;
    my $state = shift;
    my $script = "$scripts_dir/$devs_by_id->{$id}->{name}_$state";
    print " $script\n";
    open F, ">$script" or die "failed to open $script: $!";
    if (exists $devs_by_id->{$id}->{$state."_pre_commands"}) {
        foreach my $cmd (@{$devs_by_id->{$id}->{$state."_pre_commands"}}) {
            print F "$cmd\n";
        }
    }
    if (length($devs_by_id->{$id}->{$state."_code"}) > 0) {
        print F "$sender'".$devs_by_id->{$id}->{$state."_code"}."'\n";
    }
    if (exists $devs_by_id->{$id}->{$state."_post_commands"}) {
        foreach my $cmd (@{$devs_by_id->{$id}->{$state."_post_commands"}}) {
            print F "$cmd\n";
        }
    }
    close F;
    chmod 0755, $script;
}

sub read_code {
    system "pilight-debug > /tmp/433.pilight.dbg";
    open F, "</tmp/433.pilight.dbg";
    my $code;
    while (<F>) {
        if (/Raw code/) {
            $code = <F>;
            chomp $code;
            $code =~ s/ +$//;
            last;
        }
    }
    close F;
    unlink "/tmp/433.pilight.dbg";
    return $code;
}

sub get_next_id {
    my @ids = sort(keys(%{$devs_by_id}));
    my $id = $ids[$#ids] + 1;
    return $id;
}

sub load_config {
  open F, "<$config_file" or die "error opening $config_file: $!";
  my $data;
  $data .= $_ while (<F>);
  close F;
  my $config = from_json $data;
  my $devs_by_id = {};
  my $devs_by_name = {};
  foreach my $dev (@{$config->{devices}}) {
    $devs_by_id->{$dev->{id}} = $dev;
    $devs_by_name->{$dev->{name}} = $dev;
  }
  return ($config, $devs_by_id, $devs_by_name);
}

sub save_config {
  my $config = shift;
  my $data = to_json $config, {pretty => 1};
  open F, ">$config_file" or die "error opening $config_file: $!";
  print F $data;
  close F;
}

sub set_state {
  my $config = shift;
  my $dev = shift;
  my $state = shift;
  my $skip_prepost = shift;
  my $code = $dev->{$state."_code"};

  my @pre_cmds;
  my @post_cmds;
  if (!defined($skip_prepost)) {
      if (exists $dev->{$state."_pre_commands"}) {
          @pre_cmds = @{$dev->{$state."_pre_commands"}};
      }
      if (exists $dev->{$state."_post_commands"}) {
          @post_cmds = @{$dev->{$state."_post_commands"}};
      }
  }

  if (!defined($skip_prepost)) {
      # run pre commands
      print "running ".scalar(@pre_cmds)." pre commands... ";
      foreach my $cmd (@pre_cmds) {
          system "$cmd";
      }
      print "done\n";
  }

  # switch the socket
  print "sending 433MHz code... ";
  print "exec: $sender '$code'";
  system "$sender '$code'";
  print "done\n";

  if (!defined($skip_prepost)) {
      # run post commands
      print "running ".scalar(@post_cmds)." post commands... ";
      foreach my $cmd (@post_cmds) {
          system "$cmd";
      }
      print "done\n";
  }
}
